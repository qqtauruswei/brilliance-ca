// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://github.com",
        "contact": {
            "name": "API Support",
            "url": "http://www.cnblogs.com",
            "email": "×××@qq.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ca/newCa": {
            "post": {
                "description": "Create a new CA certificate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "新建 CA",
                "parameters": [
                    {
                        "description": "证书请求信息",
                        "name": "CertificateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Result.Result"
                        }
                    }
                }
            }
        },
        "/ca/revokeCert": {
            "post": {
                "description": "Revoke a certificate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "吊销用户证书",
                "parameters": [
                    {
                        "description": "证书主题",
                        "name": "RevokeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RevokeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Result.Result"
                        }
                    }
                }
            }
        },
        "/ca/signCert": {
            "post": {
                "description": "CA sign a new certificate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "CA 签发证书",
                "parameters": [
                    {
                        "description": "证书请求信息",
                        "name": "SignCertRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignCertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Result.Result"
                        }
                    }
                }
            }
        },
        "/crl/genCrl": {
            "post": {
                "description": "Gerate a crl",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRL"
                ],
                "summary": "生成 crl",
                "parameters": [
                    {
                        "description": "证书主题",
                        "name": "CrlRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CrlRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Result.Result"
                        }
                    }
                }
            }
        },
        "/key/newKeyPair": {
            "post": {
                "description": "Gerate a keypair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KEY"
                ],
                "summary": "生成 keypair",
                "parameters": [
                    {
                        "description": "密钥参数",
                        "name": "KeyRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.KeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Result.Result"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Result.Result": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "model.CertificateRequest": {
            "type": "object",
            "properties": {
                "commonName": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "cryptoType": {
                    "type": "string"
                },
                "isCA": {
                    "type": "boolean"
                },
                "issuerSubject": {
                    "type": "string"
                },
                "keySize": {
                    "type": "integer"
                },
                "locality": {
                    "type": "string"
                },
                "org": {
                    "type": "string"
                },
                "orgUnit": {
                    "type": "string"
                },
                "period": {
                    "type": "integer"
                },
                "postalCode": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "streetAddress": {
                    "type": "string"
                }
            }
        },
        "model.CrlRequest": {
            "type": "object",
            "properties": {
                "issuerSubject": {
                    "type": "string"
                }
            }
        },
        "model.KeyRequest": {
            "type": "object",
            "properties": {
                "cryptoType": {
                    "type": "string"
                },
                "keySize": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                }
            }
        },
        "model.RevokeRequest": {
            "type": "object",
            "properties": {
                "certificateSubject": {
                    "type": "string"
                }
            }
        },
        "model.SignCertRequest": {
            "type": "object",
            "properties": {
                "commonName": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "cryptoType": {
                    "type": "string"
                },
                "isCA": {
                    "type": "boolean"
                },
                "issuerSubject": {
                    "type": "string"
                },
                "keyName": {
                    "type": "string"
                },
                "keySize": {
                    "type": "integer"
                },
                "locality": {
                    "type": "string"
                },
                "org": {
                    "type": "string"
                },
                "orgUnit": {
                    "type": "string"
                },
                "period": {
                    "type": "integer"
                },
                "postalCode": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "streetAddress": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Golang Esign API",
	Description: "Golang api of demo",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
